syntax = "proto3";
package ai_bridge;
import "google/protobuf/empty.proto";



message ContextGrpcModel{
    repeated string Headers = 1;
    bool Voice = 2;
    string RequestId = 3;
}

message ReasoningGrpcRequest{
    optional ContextGrpcModel Ctx = 1;
    string Text = 2;
}

message ReasoningGrpcResponse{
    string TextToken = 1;
    repeated AiBridgeToolCallGrpcModel ToolCalls = 2;
    bool Error = 3;
    repeated string Labels = 4;
}

message AiBridgeToolCallGrpcModel{
    string FnName = 1;
    string ResponseData = 2;
    string RequestData = 3;
}

message GetDynamicContentGrpcRequest{
    repeated string Headers = 1;
    string Text = 2;
    string DomainAndPath = 3;
    uint64 Position = 4;
}

message GetDynamicContentGrpcResponse{
    string Text = 1;
}

message ExecuteToolCallGrpcRequest{
    string InventoryType = 1;
    string FnName = 2;
    string Params = 3;
}

message ExecuteToolCallGrpcResponse{
    string Response = 1;
}

message DoChatTestGrpcRequest{
    string TenantId = 1;
    string LanguageId = 2;
    string Inventory = 3;
    repeated string Id = 4;
}

message DoChatTestGrpcResponse{
    string Error = 1;
}


message GetMpcFunctionGrpcRequest{
    string InventoryId = 1;
}

message GetMpcFunctionsGrpcResponse{
    repeated string Functions = 1;
}

service AiBridge {
    rpc Reasoning(stream ReasoningGrpcRequest) returns (stream ReasoningGrpcResponse);
    rpc GetDynamicContent(GetDynamicContentGrpcRequest) returns (GetDynamicContentGrpcResponse);
    rpc ExecuteToolCall(ExecuteToolCallGrpcRequest) returns (ExecuteToolCallGrpcResponse);

    rpc GetMcpFunctions(GetMpcFunctionGrpcRequest) returns (GetMpcFunctionsGrpcResponse);

    rpc DoChatTest(DoChatTestGrpcRequest) returns (DoChatTestGrpcResponse);
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
